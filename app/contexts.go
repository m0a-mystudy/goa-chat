// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Chat API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/goa-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/goa-chat
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ListMessageContext provides the message list action context.
type ListMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoomID int
}

// NewListMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller list action.
func NewListMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoomID := req.Params["roomID"]
	if len(paramRoomID) > 0 {
		rawRoomID := paramRoomID[0]
		if roomID, err2 := strconv.Atoi(rawRoomID); err2 == nil {
			rctx.RoomID = roomID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("roomID", rawRoomID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMessageContext) OK(r MessageCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json; type=collection")
	if r == nil {
		r = MessageCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListMessageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PostMessageContext provides the message post action context.
type PostMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoomID  int
	Payload *MessagePayload
}

// NewPostMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller post action.
func NewPostMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoomID := req.Params["roomID"]
	if len(paramRoomID) > 0 {
		rawRoomID := paramRoomID[0]
		if roomID, err2 := strconv.Atoi(rawRoomID); err2 == nil {
			rctx.RoomID = roomID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("roomID", rawRoomID, "integer"))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *PostMessageContext) Created(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostMessageContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ListRoomContext provides the room list action context.
type ListRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller list action.
func NewListRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRoomContext) OK(r RoomCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room+json; type=collection")
	if r == nil {
		r = RoomCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListRoomContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PostRoomContext provides the room post action context.
type PostRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RoomPayload
}

// NewPostRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller post action.
func NewPostRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *PostRoomContext) Created(r *Room) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostRoomContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// ShowRoomContext provides the room show action context.
type ShowRoomContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoomID int
}

// NewShowRoomContext parses the incoming request URL and body, performs validations and creates the
// context used by the room controller show action.
func NewShowRoomContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRoomContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRoomContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoomID := req.Params["roomID"]
	if len(paramRoomID) > 0 {
		rawRoomID := paramRoomID[0]
		if roomID, err2 := strconv.Atoi(rawRoomID); err2 == nil {
			rctx.RoomID = roomID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("roomID", rawRoomID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRoomContext) OK(r *Room) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowRoomContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRoomContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
