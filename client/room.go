// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "Chat API": room Resource Client
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/goa-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/goa-chat
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListRoomPath computes a request path to the list action of room.
func ListRoomPath() string {

	return fmt.Sprintf("/api/rooms")
}

// Retrieve all rooms.
func (c *Client) ListRoom(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListRoomRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListRoomRequest create the request corresponding to the list action endpoint of the room resource.
func (c *Client) NewListRoomRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// PostRoomPath computes a request path to the post action of room.
func PostRoomPath() string {

	return fmt.Sprintf("/api/rooms")
}

// Create new Room
func (c *Client) PostRoom(ctx context.Context, path string, payload *RoomPayload, contentType string) (*http.Response, error) {
	req, err := c.NewPostRoomRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPostRoomRequest create the request corresponding to the post action endpoint of the room resource.
func (c *Client) NewPostRoomRequest(ctx context.Context, path string, payload *RoomPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowRoomPath computes a request path to the show action of room.
func ShowRoomPath(roomID int) string {
	param0 := strconv.Itoa(roomID)

	return fmt.Sprintf("/api/rooms/%s", param0)
}

// Retrieve room with given id
func (c *Client) ShowRoom(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowRoomRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowRoomRequest create the request corresponding to the show action endpoint of the room resource.
func (c *Client) NewShowRoomRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
