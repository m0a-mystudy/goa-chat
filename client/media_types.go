// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "Chat API": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/m0a-mystudy/goa-chat/design
// --out=$(GOPATH)/src/github.com/m0a-mystudy/goa-chat
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// A account (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// Date of creation
	Created time.Time `form:"created" json:"created" xml:"created"`
	// ID of room
	ID       string `form:"id" json:"id" xml:"id"`
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "password"))
	}

	return
}

// DecodeAccount decodes the Account instance encoded in resp body.
func (c *Client) DecodeAccount(resp *http.Response) (*Account, error) {
	var decoded Account
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AccountCollection is the media type for an array of Account (default view)
//
// Identifier: application/vnd.account+json; type=collection; view=default
type AccountCollection []*Account

// Validate validates the AccountCollection media type instance.
func (mt AccountCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAccountCollection decodes the AccountCollection instance encoded in resp body.
func (c *Client) DecodeAccountCollection(resp *http.Response) (AccountCollection, error) {
	var decoded AccountCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// a google login (default view)
//
// Identifier: application/vnd.login+json; view=default
type Login struct {
	URL string `form:"url" json:"url" xml:"url"`
}

// Validate validates the Login media type instance.
func (mt *Login) Validate() (err error) {
	if mt.URL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "url"))
	}
	return
}

// DecodeLogin decodes the Login instance encoded in resp body.
func (c *Client) DecodeLogin(resp *http.Response) (*Login, error) {
	var decoded Login
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A Message (default view)
//
// Identifier: application/vnd.message+json; view=default
type Message struct {
	AccountID int       `form:"accountID" json:"accountID" xml:"accountID"`
	Body      string    `form:"body" json:"body" xml:"body"`
	PostDate  time.Time `form:"postDate" json:"postDate" xml:"postDate"`
}

// Validate validates the Message media type instance.
func (mt *Message) Validate() (err error) {

	if mt.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}

	if utf8.RuneCountInString(mt.Body) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.body`, mt.Body, utf8.RuneCountInString(mt.Body), 1, true))
	}
	if utf8.RuneCountInString(mt.Body) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.body`, mt.Body, utf8.RuneCountInString(mt.Body), 400, false))
	}
	return
}

// DecodeMessage decodes the Message instance encoded in resp body.
func (c *Client) DecodeMessage(resp *http.Response) (*Message, error) {
	var decoded Message
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// MessageCollection is the media type for an array of Message (default view)
//
// Identifier: application/vnd.message+json; type=collection; view=default
type MessageCollection []*Message

// Validate validates the MessageCollection media type instance.
func (mt MessageCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeMessageCollection decodes the MessageCollection instance encoded in resp body.
func (c *Client) DecodeMessageCollection(resp *http.Response) (MessageCollection, error) {
	var decoded MessageCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A room (default view)
//
// Identifier: application/vnd.room+json; view=default
type Room struct {
	// Date of creation
	Created *time.Time `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// description of room
	Description string `form:"description" json:"description" xml:"description"`
	// ID of room
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of room
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Room media type instance.
func (mt *Room) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if utf8.RuneCountInString(mt.Description) > 400 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.description`, mt.Description, utf8.RuneCountInString(mt.Description), 400, false))
	}
	return
}

// DecodeRoom decodes the Room instance encoded in resp body.
func (c *Client) DecodeRoom(resp *http.Response) (*Room, error) {
	var decoded Room
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// RoomCollection is the media type for an array of Room (default view)
//
// Identifier: application/vnd.room+json; type=collection; view=default
type RoomCollection []*Room

// Validate validates the RoomCollection media type instance.
func (mt RoomCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeRoomCollection decodes the RoomCollection instance encoded in resp body.
func (c *Client) DecodeRoomCollection(resp *http.Response) (RoomCollection, error) {
	var decoded RoomCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
