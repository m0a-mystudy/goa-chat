// Package models contains the types for schema 'goa_chat'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Account represents a row from 'goa_chat.accounts'.
type Account struct {
	Name     string    `json:"name"`     // name
	Password string    `json:"password"` // password
	Image    []byte    `json:"image"`    // image
	Created  time.Time `json:"created"`  // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Account exists in the database.
func (a *Account) Exists() bool {
	return a._exists
}

// Deleted provides information if the Account has been deleted from the database.
func (a *Account) Deleted() bool {
	return a._deleted
}

// Insert inserts the Account to the database.
func (a *Account) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO goa_chat.accounts (` +
		`name, password, image, created` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.Name, a.Password, a.Image, a.Created)
	_, err = db.Exec(sqlstr, a.Name, a.Password, a.Image, a.Created)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Account in the database.
func (a *Account) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE goa_chat.accounts SET ` +
		`password = ?, image = ?, created = ?` +
		` WHERE name = ?`

	// run query
	XOLog(sqlstr, a.Password, a.Image, a.Created, a.Name)
	_, err = db.Exec(sqlstr, a.Password, a.Image, a.Created, a.Name)
	return err
}

// Save saves the Account to the database.
func (a *Account) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Account from the database.
func (a *Account) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM goa_chat.accounts WHERE name = ?`

	// run query
	XOLog(sqlstr, a.Name)
	_, err = db.Exec(sqlstr, a.Name)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AccountByName retrieves a row from 'goa_chat.accounts' as a Account.
//
// Generated from index 'accounts_name_pkey'.
func AccountByName(db XODB, name string) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`name, password, image, created ` +
		`FROM goa_chat.accounts ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	a := Account{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&a.Name, &a.Password, &a.Image, &a.Created)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
