// Package models contains the types for schema 'goa_chat'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Message represents a row from 'goa_chat.messages'.
type Message struct {
	ID        int       `json:"id"`         // id
	RoomID    int       `json:"room_id"`    // room_id
	AccountID int       `json:"account_id"` // account_id
	Body      string    `json:"body"`       // body
	Postdate  time.Time `json:"postDate"`   // postDate

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO goa_chat.messages (` +
		`room_id, account_id, body, postDate` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.RoomID, m.AccountID, m.Body, m.Postdate)
	res, err := db.Exec(sqlstr, m.RoomID, m.AccountID, m.Body, m.Postdate)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE goa_chat.messages SET ` +
		`room_id = ?, account_id = ?, body = ?, postDate = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.RoomID, m.AccountID, m.Body, m.Postdate, m.ID)
	_, err = db.Exec(sqlstr, m.RoomID, m.AccountID, m.Body, m.Postdate, m.ID)
	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM goa_chat.messages WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// Room returns the Room associated with the Message's RoomID (room_id).
//
// Generated from foreign key 'room_id'.
func (m *Message) Room(db XODB) (*Room, error) {
	return RoomByID(db, m.RoomID)
}

// MessageByID retrieves a row from 'goa_chat.messages' as a Message.
//
// Generated from index 'messages_id_pkey'.
func MessageByID(db XODB, id int) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, room_id, account_id, body, postDate ` +
		`FROM goa_chat.messages ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.RoomID, &m.AccountID, &m.Body, &m.Postdate)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MessagesByRoomID retrieves a row from 'goa_chat.messages' as a Message.
//
// Generated from index 'room_id_idx'.
func MessagesByRoomID(db XODB, roomID int) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, room_id, account_id, body, postDate ` +
		`FROM goa_chat.messages ` +
		`WHERE room_id = ? ` +
		`order by postDate desc limit 100`

	// run query
	XOLog(sqlstr, roomID)
	q, err := db.Query(sqlstr, roomID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.RoomID, &m.AccountID, &m.Body, &m.Postdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}
