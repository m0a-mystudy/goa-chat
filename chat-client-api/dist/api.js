/**
 * goa study chat
 * goa study chat api
 *
 * OpenAPI spec version:
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * AccountApi - fetch parameter creator
 */
exports.AccountApiFetchParamCreator = {
    /**
     * list account
     * Retrieve all accunts.
     */
    accountList: function (options) {
        var baseUrl = "/api/accounts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * post account
     * Create new account
     * @param payload
     */
    accountPost: function (params, options) {
        // verify required parameter "payload" is set
        if (params["payload"] == null) {
            throw new Error("Missing required parameter payload when calling accountPost");
        }
        var baseUrl = "/api/accounts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (options.headers) {
            contentTypeHeader = assign(contentTypeHeader, options.headers);
        }
        if (params["payload"]) {
            fetchOptions.body = JSON.stringify(params["payload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * show account
     * Retrieve account with given id or something
     * @param user
     */
    accountShow: function (params, options) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling accountShow");
        }
        var baseUrl = "/api/accounts/{user}"
            .replace("{" + "user" + "}", "" + params["user"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AccountApi - functional programming interface
 */
exports.AccountApiFp = {
    /**
     * list account
     * Retrieve all accunts.
     */
    accountList: function (options) {
        var fetchArgs = exports.AccountApiFetchParamCreator.accountList(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * post account
     * Create new account
     * @param payload
     */
    accountPost: function (params, options) {
        var fetchArgs = exports.AccountApiFetchParamCreator.accountPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * show account
     * Retrieve account with given id or something
     * @param user
     */
    accountShow: function (params, options) {
        var fetchArgs = exports.AccountApiFetchParamCreator.accountShow(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AccountApi - object-oriented interface
 */
var AccountApi = (function (_super) {
    __extends(AccountApi, _super);
    function AccountApi() {
        _super.apply(this, arguments);
    }
    /**
     * list account
     * Retrieve all accunts.
     */
    AccountApi.prototype.accountList = function (options) {
        return exports.AccountApiFp.accountList(options)(this.fetch, this.basePath);
    };
    /**
     * post account
     * Create new account
     * @param payload
     */
    AccountApi.prototype.accountPost = function (params, options) {
        return exports.AccountApiFp.accountPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * show account
     * Retrieve account with given id or something
     * @param user
     */
    AccountApi.prototype.accountShow = function (params, options) {
        return exports.AccountApiFp.accountShow(params, options)(this.fetch, this.basePath);
    };
    return AccountApi;
}(BaseAPI));
exports.AccountApi = AccountApi;
;
/**
 * AccountApi - factory interface
 */
exports.AccountApiFactory = function (fetch, basePath) {
    return {
        /**
         * list account
         * Retrieve all accunts.
         */
        accountList: function (options) {
            return exports.AccountApiFp.accountList(options)(fetch, basePath);
        },
        /**
         * post account
         * Create new account
         * @param payload
         */
        accountPost: function (params, options) {
            return exports.AccountApiFp.accountPost(params, options)(fetch, basePath);
        },
        /**
         * show account
         * Retrieve account with given id or something
         * @param user
         */
        accountShow: function (params, options) {
            return exports.AccountApiFp.accountShow(params, options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreator = {
    /**
     * Download ./goa-chat-client/build/index.html
     */
    serve: function (options) {
        var baseUrl = "/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Download ./goa-chat-client/build/static
     * @param filepath Relative file path
     */
    servestaticfilepath: function (params, options) {
        // verify required parameter "filepath" is set
        if (params["filepath"] == null) {
            throw new Error("Missing required parameter filepath when calling servestaticfilepath");
        }
        var baseUrl = "/static/{filepath}"
            .replace("{" + "filepath" + "}", "" + params["filepath"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     * Download ./goa-chat-client/build/index.html
     */
    serve: function (options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.serve(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Download ./goa-chat-client/build/static
     * @param filepath Relative file path
     */
    servestaticfilepath: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.servestaticfilepath(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        _super.apply(this, arguments);
    }
    /**
     * Download ./goa-chat-client/build/index.html
     */
    DefaultApi.prototype.serve = function (options) {
        return exports.DefaultApiFp.serve(options)(this.fetch, this.basePath);
    };
    /**
     * Download ./goa-chat-client/build/static
     * @param filepath Relative file path
     */
    DefaultApi.prototype.servestaticfilepath = function (params, options) {
        return exports.DefaultApiFp.servestaticfilepath(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         * Download ./goa-chat-client/build/index.html
         */
        serve: function (options) {
            return exports.DefaultApiFp.serve(options)(fetch, basePath);
        },
        /**
         * Download ./goa-chat-client/build/static
         * @param filepath Relative file path
         */
        servestaticfilepath: function (params, options) {
            return exports.DefaultApiFp.servestaticfilepath(params, options)(fetch, basePath);
        },
    };
};
/**
 * MessageApi - fetch parameter creator
 */
exports.MessageApiFetchParamCreator = {
    /**
     * list message
     * Retrieve all messages.
     * @param roomID
     * @param limit
     * @param offset
     */
    messageList: function (params, options) {
        // verify required parameter "roomID" is set
        if (params["roomID"] == null) {
            throw new Error("Missing required parameter roomID when calling messageList");
        }
        var baseUrl = "/api/rooms/{roomID}/messages"
            .replace("{" + "roomID" + "}", "" + params["roomID"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "limit": params["limit"],
            "offset": params["offset"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * post message
     * Create new message  Required security scopes:   * &#x60;api:access&#x60;
     * @param roomID
     * @param payload
     */
    messagePost: function (params, options) {
        // verify required parameter "roomID" is set
        if (params["roomID"] == null) {
            throw new Error("Missing required parameter roomID when calling messagePost");
        }
        // verify required parameter "payload" is set
        if (params["payload"] == null) {
            throw new Error("Missing required parameter payload when calling messagePost");
        }
        var baseUrl = "/api/rooms/{roomID}/messages"
            .replace("{" + "roomID" + "}", "" + params["roomID"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (options.headers) {
            contentTypeHeader = assign(contentTypeHeader, options.headers);
        }
        if (params["payload"]) {
            fetchOptions.body = JSON.stringify(params["payload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * show message
     * Retrieve message with given id
     * @param messageID
     * @param roomID
     */
    messageShow: function (params, options) {
        // verify required parameter "messageID" is set
        if (params["messageID"] == null) {
            throw new Error("Missing required parameter messageID when calling messageShow");
        }
        // verify required parameter "roomID" is set
        if (params["roomID"] == null) {
            throw new Error("Missing required parameter roomID when calling messageShow");
        }
        var baseUrl = "/api/rooms/{roomID}/messages/{messageID}"
            .replace("{" + "messageID" + "}", "" + params["messageID"])
            .replace("{" + "roomID" + "}", "" + params["roomID"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * MessageApi - functional programming interface
 */
exports.MessageApiFp = {
    /**
     * list message
     * Retrieve all messages.
     * @param roomID
     * @param limit
     * @param offset
     */
    messageList: function (params, options) {
        var fetchArgs = exports.MessageApiFetchParamCreator.messageList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * post message
     * Create new message  Required security scopes:   * &#x60;api:access&#x60;
     * @param roomID
     * @param payload
     */
    messagePost: function (params, options) {
        var fetchArgs = exports.MessageApiFetchParamCreator.messagePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * show message
     * Retrieve message with given id
     * @param messageID
     * @param roomID
     */
    messageShow: function (params, options) {
        var fetchArgs = exports.MessageApiFetchParamCreator.messageShow(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * MessageApi - object-oriented interface
 */
var MessageApi = (function (_super) {
    __extends(MessageApi, _super);
    function MessageApi() {
        _super.apply(this, arguments);
    }
    /**
     * list message
     * Retrieve all messages.
     * @param roomID
     * @param limit
     * @param offset
     */
    MessageApi.prototype.messageList = function (params, options) {
        return exports.MessageApiFp.messageList(params, options)(this.fetch, this.basePath);
    };
    /**
     * post message
     * Create new message  Required security scopes:   * &#x60;api:access&#x60;
     * @param roomID
     * @param payload
     */
    MessageApi.prototype.messagePost = function (params, options) {
        return exports.MessageApiFp.messagePost(params, options)(this.fetch, this.basePath);
    };
    /**
     * show message
     * Retrieve message with given id
     * @param messageID
     * @param roomID
     */
    MessageApi.prototype.messageShow = function (params, options) {
        return exports.MessageApiFp.messageShow(params, options)(this.fetch, this.basePath);
    };
    return MessageApi;
}(BaseAPI));
exports.MessageApi = MessageApi;
;
/**
 * MessageApi - factory interface
 */
exports.MessageApiFactory = function (fetch, basePath) {
    return {
        /**
         * list message
         * Retrieve all messages.
         * @param roomID
         * @param limit
         * @param offset
         */
        messageList: function (params, options) {
            return exports.MessageApiFp.messageList(params, options)(fetch, basePath);
        },
        /**
         * post message
         * Create new message  Required security scopes:   * &#x60;api:access&#x60;
         * @param roomID
         * @param payload
         */
        messagePost: function (params, options) {
            return exports.MessageApiFp.messagePost(params, options)(fetch, basePath);
        },
        /**
         * show message
         * Retrieve message with given id
         * @param messageID
         * @param roomID
         */
        messageShow: function (params, options) {
            return exports.MessageApiFp.messageShow(params, options)(fetch, basePath);
        },
    };
};
/**
 * RoomApi - fetch parameter creator
 */
exports.RoomApiFetchParamCreator = {
    /**
     * list room
     * Retrieve all rooms.
     * @param limit
     * @param offset
     */
    roomList: function (params, options) {
        var baseUrl = "/api/rooms";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "limit": params["limit"],
            "offset": params["offset"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * post room
     * Create new Room  Required security scopes:   * &#x60;api:access&#x60;
     * @param payload
     */
    roomPost: function (params, options) {
        // verify required parameter "payload" is set
        if (params["payload"] == null) {
            throw new Error("Missing required parameter payload when calling roomPost");
        }
        var baseUrl = "/api/rooms";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (options.headers) {
            contentTypeHeader = assign(contentTypeHeader, options.headers);
        }
        if (params["payload"]) {
            fetchOptions.body = JSON.stringify(params["payload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * show room
     * Retrieve room with given id
     * @param roomID
     */
    roomShow: function (params, options) {
        // verify required parameter "roomID" is set
        if (params["roomID"] == null) {
            throw new Error("Missing required parameter roomID when calling roomShow");
        }
        var baseUrl = "/api/rooms/{roomID}"
            .replace("{" + "roomID" + "}", "" + params["roomID"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * watch room
     * Retrieve room with given id
     * @param roomID
     */
    roomWatch: function (params, options) {
        // verify required parameter "roomID" is set
        if (params["roomID"] == null) {
            throw new Error("Missing required parameter roomID when calling roomWatch");
        }
        var baseUrl = "/api/rooms/{roomID}/watch"
            .replace("{" + "roomID" + "}", "" + params["roomID"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * RoomApi - functional programming interface
 */
exports.RoomApiFp = {
    /**
     * list room
     * Retrieve all rooms.
     * @param limit
     * @param offset
     */
    roomList: function (params, options) {
        var fetchArgs = exports.RoomApiFetchParamCreator.roomList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * post room
     * Create new Room  Required security scopes:   * &#x60;api:access&#x60;
     * @param payload
     */
    roomPost: function (params, options) {
        var fetchArgs = exports.RoomApiFetchParamCreator.roomPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * show room
     * Retrieve room with given id
     * @param roomID
     */
    roomShow: function (params, options) {
        var fetchArgs = exports.RoomApiFetchParamCreator.roomShow(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * watch room
     * Retrieve room with given id
     * @param roomID
     */
    roomWatch: function (params, options) {
        var fetchArgs = exports.RoomApiFetchParamCreator.roomWatch(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * RoomApi - object-oriented interface
 */
var RoomApi = (function (_super) {
    __extends(RoomApi, _super);
    function RoomApi() {
        _super.apply(this, arguments);
    }
    /**
     * list room
     * Retrieve all rooms.
     * @param limit
     * @param offset
     */
    RoomApi.prototype.roomList = function (params, options) {
        return exports.RoomApiFp.roomList(params, options)(this.fetch, this.basePath);
    };
    /**
     * post room
     * Create new Room  Required security scopes:   * &#x60;api:access&#x60;
     * @param payload
     */
    RoomApi.prototype.roomPost = function (params, options) {
        return exports.RoomApiFp.roomPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * show room
     * Retrieve room with given id
     * @param roomID
     */
    RoomApi.prototype.roomShow = function (params, options) {
        return exports.RoomApiFp.roomShow(params, options)(this.fetch, this.basePath);
    };
    /**
     * watch room
     * Retrieve room with given id
     * @param roomID
     */
    RoomApi.prototype.roomWatch = function (params, options) {
        return exports.RoomApiFp.roomWatch(params, options)(this.fetch, this.basePath);
    };
    return RoomApi;
}(BaseAPI));
exports.RoomApi = RoomApi;
;
/**
 * RoomApi - factory interface
 */
exports.RoomApiFactory = function (fetch, basePath) {
    return {
        /**
         * list room
         * Retrieve all rooms.
         * @param limit
         * @param offset
         */
        roomList: function (params, options) {
            return exports.RoomApiFp.roomList(params, options)(fetch, basePath);
        },
        /**
         * post room
         * Create new Room  Required security scopes:   * &#x60;api:access&#x60;
         * @param payload
         */
        roomPost: function (params, options) {
            return exports.RoomApiFp.roomPost(params, options)(fetch, basePath);
        },
        /**
         * show room
         * Retrieve room with given id
         * @param roomID
         */
        roomShow: function (params, options) {
            return exports.RoomApiFp.roomShow(params, options)(fetch, basePath);
        },
        /**
         * watch room
         * Retrieve room with given id
         * @param roomID
         */
        roomWatch: function (params, options) {
            return exports.RoomApiFp.roomWatch(params, options)(fetch, basePath);
        },
    };
};
